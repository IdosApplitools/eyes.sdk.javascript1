name: Tests
description: Run tests for a package
inputs:
  package:
    description: name of the package directory in repository
    type: string
    required: true
  type:
    description: type of the testing (unit, it, e2e, coverage)
    type: string
  remote:
    description: remote type (local, eg)
    type: string
    default: local
  install:
    description: names of packages to install before testing
    type: string
  links:
    description: names of package directories to link before testing
    type: string
  linking-depth:
    description: linking depth
    type: string
    default: 0
  grep:
    description: grep pattern to filter tests
    type: string
  jobs:
    description: number of jobs to run tests in parallel
    type: string
  report:
    description: report level
    type: string
    default: sandbox
runs:
  using: composite
  steps:
    - shell: bash
      env:
        APPLITOOLS_TEST_REMOTE: ${{inputs.remote}}
        MOCHA_GREP: ${{inputs.grep}}
        MOCHA_JOBS: ${{inputs.remote == 'eg' && 50 || inputs.jobs}}
      run: |
        echo "::group::Configure NPM"
        echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc
        echo "registry=https://registry.npmjs.org/" >> .npmrc
        echo "always-auth=true" >> .npmrc
        if [ "${{runner.os}}" = "Windows" ]
        then
          npm config set script-shell "C:\\Program Files\\Git\\bin\\bash.exe"
        fi
        echo "::endgroup::"

        echo "::group::Installing and updating dependencies"
        cd "packages/${{inputs.package}}"
        yarn install
        npm run deps --if-present $([ "${{runner.os}}" = "Windows" ] && echo --script-shell $COMSPEC) -- --skip-commit
        if [ ! -z "${{inputs.install}}" ]; then yarn add --dev ${{inputs.install}}; fi
        echo "::endgroup::"

        if [ ! -z "${{inputs.links}}" ]
        then
          echo "::group::Linking dependencies"
          npx link --include scripts --install
          node ./node_modules/.bin/link --include ${{inputs.links}} --build --install --max-depth ${{inputs.linking-depth}}
          echo "::endgroup::"
        fi

        echo "::group::Building package"
        npm run build --if-present
        echo "::endgroup::"

        echo "::group::Setting up test environment"
        npm run setup --if-present
        echo "::endgroup::"

        echo "::group::Running tests"
        if [ ! -z "${{inputs.type}}" ]; then npm run test:${{inputs.type}}; else npm run test --if-present; fi
        echo "::endgroup::"

        echo "::group::Sending reports"
        if [ "${{inputs.sandbox}}" = "sandbox" ]; then npm run report --if-present -- --sandbox; else npm run report --if-present; fi
        echo "::endgroup::"
