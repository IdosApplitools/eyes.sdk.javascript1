import SessionType from './enums/SessionType';
import StitchMode from './enums/StitchMode';
import MatchLevel from './enums/MatchLevel';
import CheckSettingsFluent, { CheckSettings } from './input/CheckSettings';
import ProxySettingsData, { ProxySettings } from './input/ProxySettings';
import ConfigurationData, { Configuration } from './input/Configuration';
import BatchInfoData, { BatchInfo } from './input/BatchInfo';
import RectangleSizeData, { RectangleSize } from './input/RectangleSize';
import { Region } from './input/Region';
import EyesRunner from './Runners';
declare type EyesCommands<TElement, TSelector> = {
    check: (settings?: CheckSettings<TElement, TSelector>) => Promise<void>;
    close: () => Promise<void>;
    abort: () => Promise<void>;
};
export declare type EyesSpec<TDriver, TElement, TSelector> = {
    isDriver(value: any): value is TDriver;
    isElement(value: any): value is TElement;
    isSelector(value: any): value is TSelector;
    openEyes(driver: TDriver, config?: Configuration): EyesCommands<TElement, TSelector>;
    closeBatch(...args: any[]): Promise<any>;
    setViewportSize(driver: TDriver, viewportSize: RectangleSize): Promise<void>;
};
export default abstract class Eyes<TDriver = unknown, TElement = unknown, TSelector = unknown> {
    protected abstract readonly _spec: EyesSpec<TDriver, TElement, TSelector>;
    private _config;
    private _runner;
    private _driver;
    private _commands;
    static setViewportSize<TDriver>(driver: TDriver, viewportSize: RectangleSizeData | RectangleSize): Promise<void>;
    constructor(runner?: EyesRunner, config?: Configuration | ConfigurationData);
    constructor(config: Configuration | ConfigurationData, runner?: EyesRunner);
    get runner(): EyesRunner;
    getRunner(): EyesRunner;
    get driver(): TDriver;
    getDriver(): TDriver;
    get config(): Configuration;
    set config(config: Configuration);
    getConfiguration(): ConfigurationData;
    setConfiguration(config: Configuration | ConfigurationData): void;
    open(driver: TDriver, config?: Configuration | ConfigurationData): Promise<TDriver>;
    open(driver: TDriver, appName?: string, testName?: string, viewportSize?: RectangleSize, sessionType?: SessionType): Promise<TDriver>;
    check(name: string, checkSettings: CheckSettingsFluent<TElement, TSelector>): Promise<void>;
    check(checkSettings?: CheckSettings<TElement, TSelector>): Promise<void>;
    checkWindow(name?: string, timeout?: number, isFully?: boolean): Promise<void>;
    checkFrame(element: TElement | TSelector | string | number, timeout?: number, name?: string): Promise<void>;
    checkElement(element: TElement, timeout?: number, name?: string): Promise<void>;
    checkElementBy(selector: TSelector, timeout?: number, name?: string): Promise<void>;
    checkRegion(region?: Region, name?: string, timeout?: number): Promise<void>;
    checkRegionByElement(element: TElement, name?: string, timeout?: number): Promise<void>;
    checkRegionBy(selector: TSelector, name?: string, timeout?: number, isFully?: boolean): Promise<void>;
    checkRegionInFrame(frame: TElement | TSelector | string | number, selector: TSelector, timeout?: number, name?: string, isFully?: boolean): Promise<void>;
    close(throwErr?: boolean): Promise<void>;
    abort(): Promise<void>;
    closeBatch(): Promise<void>;
    addProperty(name: string, value: string): ConfigurationData;
    clearProperties(): ConfigurationData;
    getBatch(): BatchInfoData;
    setBatch(batch: BatchInfo | BatchInfoData): void;
    setBatch(name: string, id?: string, startedAt?: Date | string): void;
    getApiKey(): string;
    setApiKey(apiKey: string): void;
    getTestName(): string;
    setTestName(testName: string): void;
    getAppName(): string;
    setAppName(appName: string): void;
    getBaselineBranchName(): string;
    setBaselineBranchName(baselineBranchName: string): void;
    getBaselineName(): string;
    setBaselineName(baselineName: string): void;
    getBaselineEnvName(): string;
    setBaselineEnvName(baselineEnvName: string): void;
    getBranchName(): string;
    setBranchName(branchName: string): void;
    getHostApp(): string;
    setHostApp(hostApp: string): void;
    getHostOS(): string;
    setHostOS(hostOS: string): void;
    getHostAppInfo(): string;
    setHostAppInfo(hostAppInfo: string): void;
    getHostOSInfo(): string;
    setHostOSInfo(hostOSInfo: string): void;
    getDeviceInfo(): string;
    setDeviceInfo(deviceInfo: string): void;
    setIgnoreCaret(ignoreCaret: boolean): void;
    getIgnoreCaret(): boolean;
    getIsDisabled(): boolean;
    setIsDisabled(isDisabled: boolean): void;
    getMatchLevel(): MatchLevel;
    setMatchLevel(matchLevel: MatchLevel): void;
    getMatchTimeout(): number;
    setMatchTimeout(matchTimeout: number): void;
    getParentBranchName(): string;
    setParentBranchName(parentBranchName: string): void;
    setProxy(proxy: ProxySettings | ProxySettingsData): void;
    setProxy(isDisabled: true): void;
    setProxy(url: string, username?: string, password?: string, isHttpOnly?: boolean): void;
    getProxy(): ProxySettingsData;
    getSaveDiffs(): boolean;
    setSaveDiffs(saveDiffs: boolean): void;
    getSaveNewTests(): boolean;
    setSaveNewTests(saveNewTests: boolean): void;
    getServerUrl(): string;
    setServerUrl(serverUrl: string): void;
    getSendDom(): boolean;
    setSendDom(sendDom: boolean): void;
    getHideCaret(): boolean;
    setHideCaret(hideCaret: boolean): void;
    getHideScrollbars(): boolean;
    setHideScrollbars(hideScrollbars: boolean): void;
    getForceFullPageScreenshot(): boolean;
    setForceFullPageScreenshot(forceFullPageScreenshot: boolean): void;
    getWaitBeforeScreenshots(): number;
    setWaitBeforeScreenshots(waitBeforeScreenshots: number): void;
    getStitchMode(): StitchMode;
    setStitchMode(stitchMode: StitchMode): void;
    getStitchOverlap(): number;
    setStitchOverlap(stitchOverlap: number): void;
}
export {};
