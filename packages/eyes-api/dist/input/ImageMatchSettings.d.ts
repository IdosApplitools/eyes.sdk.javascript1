import { ExactMatchSettings } from './ExactMatchSettings';
import RegionData, { Region } from './Region';
import FloatingRegionData, { FloatingRegion } from './FloatingRegion';
import AccessibilityRegionData, { AccessibilityRegion } from './AccessibilityRegion';
import { AccessibilitySettings } from './AccessibilitySettings';
import MatchLevel from '../enums/MatchLevel';
export declare type ImageMatchSettings = {
    exact?: ExactMatchSettings;
    matchLevel?: MatchLevel;
    ignoreCaret?: boolean;
    useDom?: boolean;
    enablePatterns?: boolean;
    ignoreDisplacements?: boolean;
    ignore?: Region[];
    ignoreRegions?: Region[];
    layout?: Region[];
    layoutRegions?: Region[];
    strict?: Region[];
    strictRegions?: Region[];
    content?: Region[];
    contentRegions?: Region[];
    floating?: FloatingRegion[];
    floatingRegions?: FloatingRegion[];
    accessibility?: AccessibilityRegion[];
    accessibilityRegions?: AccessibilityRegion[];
    accessibilitySettings?: AccessibilitySettings;
};
export default class ImageMatchSettingsData implements Required<ImageMatchSettings> {
    private _exact;
    private _matchLevel;
    private _ignoreCaret;
    private _useDom;
    private _enablePatterns;
    private _ignoreDisplacements;
    private _ignoreRegions;
    private _layoutRegions;
    private _strictRegions;
    private _contentRegions;
    private _floatingRegions;
    private _accessibilityRegions;
    private _accessibilitySettings;
    constructor(settings?: ImageMatchSettings);
    get exact(): ExactMatchSettings;
    set exact(exact: ExactMatchSettings);
    getExact(): ExactMatchSettings;
    setExact(exact: ExactMatchSettings): void;
    get matchLevel(): MatchLevel;
    set matchLevel(matchLevel: MatchLevel);
    getMatchLevel(): MatchLevel;
    setMatchLevel(matchLevel: MatchLevel): void;
    get ignoreCaret(): boolean;
    set ignoreCaret(ignoreCaret: boolean);
    getIgnoreCaret(): boolean;
    setIgnoreCaret(ignoreCaret: boolean): void;
    get useDom(): boolean;
    set useDom(useDom: boolean);
    getUseDom(): boolean;
    setUseDom(useDom: boolean): void;
    get enablePatterns(): boolean;
    set enablePatterns(enablePatterns: boolean);
    getEnablePatterns(): boolean;
    setEnablePatterns(enablePatterns: boolean): void;
    get ignoreDisplacements(): boolean;
    set ignoreDisplacements(ignoreDisplacements: boolean);
    getIgnoreDisplacements(): boolean;
    setIgnoreDisplacements(ignoreDisplacements: boolean): void;
    get ignoreRegions(): Region[];
    set ignoreRegions(ignoreRegions: Region[]);
    get ignore(): Region[];
    set ignore(ignoreRegions: Region[]);
    getIgnoreRegions(): RegionData[];
    setIgnoreRegions(ignoreRegions: Region[] | RegionData[]): void;
    get layoutRegions(): Region[];
    set layoutRegions(layoutRegions: Region[]);
    get layout(): Region[];
    set layout(layoutRegions: Region[]);
    getLayoutRegions(): RegionData[];
    setLayoutRegions(layoutRegions: Region[] | RegionData[]): void;
    get strictRegions(): Region[];
    set strictRegions(strictRegions: Region[]);
    get strict(): Region[];
    set strict(strictRegions: Region[]);
    getStrictRegions(): RegionData[];
    setStrictRegions(strictRegions: Region[] | RegionData[]): void;
    get contentRegions(): Region[];
    set contentRegions(contentRegions: Region[]);
    get content(): Region[];
    set content(contentRegions: Region[]);
    getContentRegions(): RegionData[];
    setContentRegions(contentRegions: Region[] | RegionData[]): void;
    get floatingRegions(): FloatingRegion[];
    set floatingRegions(floatingRegions: FloatingRegion[]);
    get floating(): Region[];
    set floating(floatingRegions: Region[]);
    getFloatingRegions(): FloatingRegionData[];
    setFloatingRegions(floatingRegions: FloatingRegion[] | FloatingRegionData[]): void;
    get accessibilityRegions(): AccessibilityRegion[];
    set accessibilityRegions(accessibilityRegions: AccessibilityRegion[]);
    get accessibility(): AccessibilityRegion[];
    set accessibility(accessibilityRegions: AccessibilityRegion[]);
    getAccessibilityRegions(): AccessibilityRegionData[];
    setAccessibilityRegions(accessibilityRegions: AccessibilityRegion[] | AccessibilityRegionData[]): void;
    get accessibilitySettings(): AccessibilitySettings;
    set accessibilitySettings(accessibilitySettings: AccessibilitySettings);
    getAccessibilitySettings(): AccessibilitySettings;
    setAccessibilitySettings(accessibilitySettings: AccessibilitySettings): void;
}
